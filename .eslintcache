[{"/home/owaish/Desktop/Task/utilize/src/index.js":"1","/home/owaish/Desktop/Task/utilize/src/App.js":"2","/home/owaish/Desktop/Task/utilize/src/reportWebVitals.js":"3","/home/owaish/Desktop/Task/utilize/src/components/about.js":"4","/home/owaish/Desktop/Task/utilize/src/components/MainComponent.js":"5","/home/owaish/Desktop/Task/utilize/src/redux/configureStore.js":"6","/home/owaish/Desktop/Task/utilize/src/redux/orders.js":"7","/home/owaish/Desktop/Task/utilize/src/shared/orders.js":"8","/home/owaish/Desktop/Task/utilize/src/redux/ActionTypes.js":"9","/home/owaish/Desktop/Task/utilize/src/components/OrderForm.js":"10","/home/owaish/Desktop/Task/utilize/src/redux/ActionCreator.js":"11"},{"size":640,"mtime":1609659208607,"results":"12","hashOfConfig":"13"},{"size":452,"mtime":1609764173928,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1609657149442,"results":"15","hashOfConfig":"13"},{"size":8126,"mtime":1609854569039,"results":"16","hashOfConfig":"13"},{"size":1781,"mtime":1609844141629,"results":"17","hashOfConfig":"13"},{"size":249,"mtime":1609764173928,"results":"18","hashOfConfig":"13"},{"size":1150,"mtime":1609857784947,"results":"19","hashOfConfig":"13"},{"size":207804,"mtime":1609778207300,"results":"20","hashOfConfig":"13"},{"size":125,"mtime":1609839435887,"results":"21","hashOfConfig":"13"},{"size":6149,"mtime":1609854317811,"results":"22","hashOfConfig":"13"},{"size":600,"mtime":1609853397622,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"byqvt5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/owaish/Desktop/Task/utilize/src/index.js",[],["50","51"],"/home/owaish/Desktop/Task/utilize/src/App.js",[],"/home/owaish/Desktop/Task/utilize/src/reportWebVitals.js",[],"/home/owaish/Desktop/Task/utilize/src/components/about.js",["52","53","54","55"],"import React, { Component } from 'react';\nimport {Col, Card, CardHeader, CardBody} from 'reactstrap';\nimport OrderForm from './OrderForm' ;\nimport { Button, Modal, Container, ModalHeader, ModalBody, Label, Row } from \"reactstrap\";\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => val && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass RenderOrder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isModalOpen: false\n        }\n    }\n\n    toggleModal = () =>  {\n        this.setState({\n          isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleSubmit = (values) => {\n        this.toggleModal();\n        this.props.updateOrder(this.props.order.id, values.name, values.email, values.product, values.quantity);\n\n    }\n\n    deleteOrder(e, index){\n        e.preventDefault();\n        console.log(\"owaish\")\n        this.props.deleteOrder(index);\n    }\n\n    render() {\n    return (\n        <>  \n        <Card>\n        <CardHeader></CardHeader>\n            <CardBody>\n                <p>Order-id: {this.props.order.id}  </p>\n                <p>Customer-Name: {this.props.order.name}  </p>\n                <p>Customer-email: {this.props.order.email}  </p>\n                <p>Product: {this.props.order.product} </p>\n                <p>Quantity: {this.props.order.quantity} </p>\n                \n            </CardBody>\n            <div className=\"col-md-2\">\n                <button onClick={(e) => this.deleteOrder(e, this.props.order.id)} className=\"btn btn-danger\">\n                    Remove\n                </button>\n                <button onClick={this.toggleModal} className=\"btn btn-danger\">\n                    Update\n                </button>\n            </div>\n        </Card>\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Update Order</ModalHeader>\n                    <ModalBody>\n                        <Container>\n                            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"product\">Product</Label>\n                                    <Control.select model=\".product\" id=\"product\" name=\"product\"\n                                        className=\"form-control\"> \n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                    </Control.select>\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"name\">Customer Name</Label>\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\n                                        placeholder=\"Customer Name\" \n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".name\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"email\">Customer Email</Label>\n                                    <Control.text model=\".email\" id=\"email\" email=\"email\"\n                                        placeholder=\"Customer Email\" \n                                        className=\"form-control\"\n                                        validators={{\n                                            required, validEmail\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid Email Address'\n                                        }}\n                                    />\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"quantity\">Quantity</Label>\n                                    <Control.text model=\".quantity\" id=\"quantity\" Quantity=\"Quantity\"\n                                        placeholder=\"Quantity\" \n                                        className=\"form-control\"\n                                        validators={{\n                                            required, isNumber\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".name\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                    />\n                                </Row>\n                                <Row className=\"form-group\">\n                                        <Button type=\"submit\" color=\"primary\">\n                                        Submit\n                                        </Button>\n                                </Row>\n                            </LocalForm>\n                        </Container>\n                    </ModalBody>\n                </Modal>\n        </>\n    );\n    }\n}\n\n\nfunction About(props) {\n\n    const order = props.orders.slice().reverse().map((order) => {\n        return (\n            <>\n            {/* {console.log(i)} */}\n            <div className=\"col-12 col-md-5 m-1\"  key={order.id}>\n                <RenderOrder order={order}\n                deleteOrder = {props.deleteOrder} updateOrder = {props.updateOrder} />\n            </div>\n            </>\n        );\n    });\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h3>Welcome, {props.name}</h3>\n                    <h5>Your email-id : {props.email}</h5> \n                    <hr />\n                </div>                \n            </div>\n            <div className=\"row row-content\">\n                <Col md={6}>\n                <h3>List of orders</h3>\n                </Col>\n                <Col md={6}>\n                    <OrderForm addOrder={props.addOrder}/>\n                    <div className=\"row\">\n                        {order}\n                    </div>\n                </Col>\n            </div>\n        </div>\n    );\n}\n\nexport default About;    ","/home/owaish/Desktop/Task/utilize/src/components/MainComponent.js",["56","57","58"],"import React, { Component } from 'react';\n// import './App.css';\nimport { Container,Row, Button } from 'reactstrap' ;\nimport GoogleLogin from 'react-google-login';\nimport About from './about';\nimport { connect } from 'react-redux'\nimport { addOrder, deleteOrder, updateOrder } from '../redux/ActionCreator';\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addOrder: (name, email, product, quantity) => dispatch(addOrder(name, email, product, quantity)),\n  updateOrder: (id, name, email, product, quantity) => dispatch(updateOrder(id, name, email, product, quantity)),\n  deleteOrder: index => dispatch(deleteOrder(index))\n});\n\nclass Main extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      route: 1,\n      name: null,\n      email:null\n    }\n  }\n\n  handleChange = (response) => {\n    this.setState({route: 2, name:response.profileObj.name, email:response.profileObj.email})\n  }\n  render () {\n    if(this.state.route===1){\n      return (\n        <div className=\"container\">\n            <h2>Welcome to Utilize</h2>\n            <GoogleLogin\n              clientId=\"725313462118-4k6vn0cse9e9mmlpjltbfco0dhepivbr.apps.googleusercontent.com\"\n              buttonText=\"Login\"\n              onSuccess={this.handleChange}\n              onFailure={console.log(\"Sorry\")}\n              cookiePolicy={'single_host_origin'}\n          />\n        </div>\n    );\n    }else{\n      return (\n        <About name={this.state.name} email={this.state.email} orders={this.props.orders} \n        addOrder={this.props.addOrder} updateOrder={this.props.updateOrder} deleteOrder = {this.props.deleteOrder} /> \n    );\n    }\n    \n  }\n  \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","/home/owaish/Desktop/Task/utilize/src/redux/configureStore.js",[],"/home/owaish/Desktop/Task/utilize/src/redux/orders.js",[],"/home/owaish/Desktop/Task/utilize/src/shared/orders.js",[],"/home/owaish/Desktop/Task/utilize/src/redux/ActionTypes.js",[],"/home/owaish/Desktop/Task/utilize/src/components/OrderForm.js",["59","60","61","62"],"import React, { Component } from 'react';\nimport { Button, Modal, Container, ModalHeader, ModalBody, Label, Row } from \"reactstrap\";\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => val && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass OrderForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isModalOpen: false\n        }\n    }\n\n    toggleModal = () =>  {\n        this.setState({\n          isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleSubmit = (values) => {\n        this.toggleModal();\n        this.props.addOrder(values.name, values.email, values.product, values.quantity);\n        // event.preventDefault();\n    }\n\n\n    render() {\n        return (\n            <>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Create Order</ModalHeader>\n                    <ModalBody>\n                        <Container>\n                            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"product\">Product</Label>\n                                    <Control.select model=\".product\" id=\"product\" name=\"product\"\n                                        className=\"form-control\"> \n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                    </Control.select>\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"name\">Customer Name</Label>\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\n                                        placeholder=\"Customer Name\" \n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".name\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"email\">Customer Email</Label>\n                                    <Control.text model=\".email\" id=\"email\" email=\"email\"\n                                        placeholder=\"Customer Email\" \n                                        className=\"form-control\"\n                                        validators={{\n                                            required, validEmail\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid Email Address'\n                                        }}\n                                    />\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"quantity\">Quantity</Label>\n                                    <Control.text model=\".quantity\" id=\"Quantity\" Quantity=\"quantity\"\n                                        placeholder=\"Quantity\" \n                                        className=\"form-control\"\n                                        validators={{\n                                            required, isNumber\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".name\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                    />\n                                </Row>\n                                <Row className=\"form-group\">\n                                        <Button type=\"submit\" color=\"primary\">\n                                        Submit\n                                        </Button>\n                                </Row>\n                            </LocalForm>\n                        </Container>\n                    </ModalBody>\n                </Modal>\n                <Button onClick={this.toggleModal}><span className=\"fa fa-pencil\"></span>{'  '}\n                    Create Order</Button>\n            </>\n        )\n    }\n}\n\nexport default OrderForm;","/home/owaish/Desktop/Task/utilize/src/redux/ActionCreator.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":68,"column":37,"nodeType":"69","endLine":69,"endColumn":66},{"ruleId":"67","severity":1,"message":"70","line":77,"column":37,"nodeType":"69","endLine":83,"endColumn":43},{"ruleId":"67","severity":1,"message":"70","line":97,"column":37,"nodeType":"69","endLine":103,"endColumn":43},{"ruleId":"67","severity":1,"message":"70","line":116,"column":37,"nodeType":"69","endLine":122,"endColumn":43},{"ruleId":"71","severity":1,"message":"72","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":19},{"ruleId":"71","severity":1,"message":"75","line":3,"column":20,"nodeType":"73","messageId":"74","endLine":3,"endColumn":23},{"ruleId":"71","severity":1,"message":"76","line":3,"column":25,"nodeType":"73","messageId":"74","endLine":3,"endColumn":31},{"ruleId":"67","severity":1,"message":"68","line":42,"column":37,"nodeType":"69","endLine":43,"endColumn":66},{"ruleId":"67","severity":1,"message":"70","line":51,"column":37,"nodeType":"69","endLine":57,"endColumn":43},{"ruleId":"67","severity":1,"message":"70","line":71,"column":37,"nodeType":"69","endLine":77,"endColumn":43},{"ruleId":"67","severity":1,"message":"70","line":90,"column":37,"nodeType":"69","endLine":96,"endColumn":43},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]